// Generated by CoffeeScript 1.4.0
(function() {
  var Account, Assignment, Course, L, async, cheerio, colors, config, http, logger, logging, models, moment, querystring, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require("underscore");

  http = require("http");

  async = require("async");

  colors = require("colors");

  moment = require("moment");

  cheerio = require("cheerio");

  querystring = require("querystring");

  config = require("./config");

  logging = require("./logging");

  models = require("./models");

  Account = models.Account;

  Course = models.Course;

  Assignment = models.Assignment;

  logger = new logging.Logger("JBHA");

  L = function(prefix, message, urgency) {
    if (urgency == null) {
      urgency = "debug";
    }
    return logger[urgency]("" + prefix.underline + " :: " + message);
  };

  module.exports = {
    authenticate: function(username, password, cb) {
      var options, post_data, req;
      username = username.toLowerCase();
      if (username === "acquire") {
        return cb(new Error("Invalid login"));
      }
      post_data = querystring.stringify({
        Email: "" + username + "@jbha.org",
        Passwd: password,
        Action: "login"
      });
      options = {
        host: "www.jbha.org",
        path: "/students/index.php",
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Content-Length': post_data.length
        }
      };
      req = http.request(options, function(res) {
        return res.on('end', function() {
          if (res.headers.location === "/students/homework.php") {
            L(username, "Remote authentication succeeded", "info");
            return Account.findOne().where('_id', username).exec(function(err, account_from_db) {
              var account, token;
              if (err) {
                return cb(err);
              }
              account = account_from_db || new Account();
              token = {
                cookie: res.headers['set-cookie'][1].split(';')[0],
                username: username,
                password: password
              };
              if (account_from_db) {
                return cb(null, account, token);
              } else {
                account.nickname = username.split('.')[0];
                account._id = username;
                return account.save(function(err) {
                  if (err) {
                    return cb(err);
                  }
                  return cb(null, account, token);
                });
              }
            });
          } else {
            L(username, "Remote authentication failed", "warn");
            return cb(new Error("Invalid login"));
          }
        });
      });
      req.on('error', function(err) {
        return cb(err);
      });
      req.write(post_data);
      return req.end();
    },
    refresh: function(token, options, cb) {
      var _this = this;
      return this._parse_courses(token, function(new_token, courses) {
        var new_assignments, parse_course;
        token = new_token;
        new_assignments = 0;
        parse_course = function(course_data, course_callback) {
          return _this._authenticated_request(token, "course-detail.php?course_id=" + course_data.id, function(err, new_token, $) {
            token = new_token;
            return async.waterfall([
              function(wf_callback) {
                return Course.findOne().where('owner', token.username).where('jbha_id', course_data.id).populate('assignments').exec(wf_callback);
              }, function(course_from_db, wf_callback) {
                var course;
                if (!course_from_db) {
                  course = new Course();
                  course.owner = token.username;
                  course.title = course_data.title;
                  course.jbha_id = course_data.id;
                  course.teacher = $("h1.normal").text().split(":").slice(0)[0];
                } else {
                  course = course_from_db;
                }
                return wf_callback(null, course);
              }, function(course, wf_callback) {
                var parse_assignment,
                  _this = this;
                parse_assignment = function(element, assignment_callback) {
                  var assignment, assignment_date, assignment_details, assignment_from_db, assignment_id, assignment_title, assignment_title_old_algo, moved, regex, regexes, splits, text_blob, _i, _len;
                  text_blob = $(element).text();
                  if (text_blob.match(/Due \w{3} \d{1,2}\, \d{4}:/)) {
                    assignment_id = $(element).attr('href').match(/\d+/)[0];
                    splits = text_blob.split(":");
                    assignment_title = splits.slice(1).join(":").trim();
                    assignment_title_old_algo = splits.slice(1)[0].trim();
                    assignment_date = moment.utc(splits.slice(0, 1)[0], "[Due] MMM DD, YYYY").valueOf();
                    assignment_details = $("#toggle-cont-" + assignment_id).html();
                    if ($("#toggle-cont-" + assignment_id).text()) {
                      regexes = [/\<h\d{1}\>/gi, /\<\/h\d{1}\>/gi, /style="([\s\S]*?)"/gi, /<!--[\s\S]*?-->/g];
                      for (_i = 0, _len = regexes.length; _i < _len; _i++) {
                        regex = regexes[_i];
                        assignment_details = assignment_details.replace(regex, "");
                      }
                      assignment_details = assignment_details.replace(/href="\/(.*?)"/, 'href="http://www.jbha.org/$1"');
                    } else {
                      assignment_details = null;
                    }
                    assignment_from_db = _.find(course.assignments, function(assignment) {
                      if (assignment.jbha_id === assignment_id) {
                        return true;
                      }
                    });
                    if (assignment_from_db) {
                      moved = assignment_from_db.date.valueOf() !== assignment_date && assignment_from_db.title !== assignment_title;
                      if (!moved) {
                        if (assignment_from_db.title === assignment_title_old_algo && assignment_title_old_algo !== assignment_title) {
                          assignment_from_db.title = assignment_title;
                          return assignment_from_db.save(function(err) {
                            L(token.username, "Fixed bum parse job on title: " + assignment_title, 'warn');
                            return assignment_callback(err);
                          });
                        } else {
                          return assignment_callback(null);
                        }
                      }
                    }
                    assignment = new Assignment();
                    assignment.owner = token.username;
                    assignment.title = assignment_title;
                    assignment.jbha_id = assignment_id;
                    assignment.details = assignment_details;
                    assignment.date = assignment_date;
                    course.assignments.push(assignment);
                    new_assignments++;
                    if (options && options.archive_if_old) {
                      if (assignment_date < Date.now()) {
                        assignment.done = true;
                        assignment.archived = true;
                      }
                    }
                    return assignment.save(function(err) {
                      if (moved) {
                        L(token.username, "Create-by-move detected on assignment with jbha_id " + assignment_id + "!", 'warn');
                        assignment_from_db.jbha_id += "-" + assignment_from_db._id;
                        return assignment_from_db.save(function(err) {
                          return assignment_callback(err);
                        });
                      } else {
                        return assignment_callback(err);
                      }
                    });
                  } else {
                    return assignment_callback(err);
                  }
                };
                return async.forEach($('a[href^="javascript:arrow_down_right"]'), parse_assignment, function(err) {
                  return wf_callback(err, course);
                });
              }
            ], function(err, course) {
              return course.save(function(err) {
                L(token.username, "Parsed course [" + course.title + "]");
                return course_callback(err);
              });
            });
          });
        };
        return async.forEach(courses, parse_course, function(err) {
          return Account.update({
            _id: token.username
          }, {
            updated: Date.now(),
            is_new: false
          }, function(err) {
            return cb(err, token, {
              new_assignments: new_assignments
            });
          });
        });
      });
    },
    _parse_courses: function(token, cb) {
      return this._authenticated_request(token, "homework.php", function(err, new_token, $) {
        var blacklist, courses, parse_course;
        token = new_token;
        courses = [];
        blacklist = ['433', '665'];
        parse_course = function(element, fe_callback) {
          var course_id;
          course_id = $(element).attr('href').match(/\d+/)[0];
          if (__indexOf.call(blacklist, course_id) < 0) {
            courses.push({
              title: $(element).text(),
              id: course_id
            });
          }
          return fe_callback(null);
        };
        return async.forEach($('a[href*="?course_id="]'), parse_course, function(err) {
          return cb(token, courses);
        });
      });
    },
    _authenticated_request: function(token, resource, cb) {
      var cookie, options, req,
        _this = this;
      cookie = token.cookie;
      if (!cookie) {
        return cb(new Error("Authentication error: No session cookie"));
      }
      options = {
        host: "www.jbha.org",
        method: 'GET',
        path: "/students/" + resource,
        headers: {
          'Cookie': cookie
        }
      };
      req = http.request(options, function(res) {
        var body;
        body = null;
        res.on('data', function(chunk) {
          return body += chunk;
        });
        return res.on('end', function() {
          var $;
          $ = cheerio.load(body);
          if ($('a[href="/students/?Action=logout"]').length === 0) {
            L(token.username, "Session expired; re-authenticating", "warn");
            return _this.authenticate(token.username, token.password, function(err, account, token) {
              if (err) {
                return cb(err);
              }
              return _this._authenticated_request(token, resource, cb);
            });
          } else {
            return cb(null, token, $);
          }
        });
      });
      req.on('error', function(err) {
        return cb(err);
      });
      return req.end();
    },
    suppress_logging: function() {
      return L = function() {};
    }
  };

}).call(this);
